{
  "file": "/home/runner/work/badpdfs-site/badpdfs-site/content/pdfs/24480polcompleted/24480polcompleted.md",
  "metadata": {
    "slug": "24480polcompleted",
    "title": "Animal 911 Calls Extraction from Rainforest Cafe Report",
    "description": "This PDF is a service call report covering 911 incidents at the Rainforest Cafe in Niagara Falls, NY. We're hunting for animals! The data is formatted as a spreadsheet within the PDF, and challenges include varied column widths, borderless tables, and large swaths of missing data.",
    "pdf": "24480polcompleted.pdf",
    "tags": [
      "Animal 911 Logs",
      "PDF Spreadsheet",
      "Truncated Columns",
      "Selective Redactions"
    ],
    "file_size_mb": 4.77,
    "page_count": 47,
    "submitted_by": "Adiel Kaplan",
    "published": true,
    "file": "24480polcompleted.md"
  },
  "cells": [
    {
      "type": "markdown",
      "content": "# Animal 911 Calls Extraction from Rainforest Cafe Report\n\nThis PDF is a service call report covering 911 incidents at the Rainforest Cafe in Niagara Falls, NY. We're hunting for animals! The data is formatted as a spreadsheet within the PDF, and challenges include varied column widths, borderless tables, and large swaths of missing data."
    },
    {
      "type": "code",
      "content": "from natural_pdf import PDF\n\npdf = PDF(\"24480polcompleted.pdf\")\npdf.show(cols=3, limit=9)",
      "execution": {
        "status": "success",
        "output": "[DEBUG] Executing code: from natural_pdf import PDF\npdf = PDF('24480polcompleted.pdf')...\n[DEBUG] Evaluating expression: pdf.show(cols=3, limit=9)...\n",
        "error": null,
        "figures": [],
        "result": {
          "type": "image/png",
          "path": "executions/pdfs/24480polcompleted/24480polcompleted/images/image_1.png"
        }
      }
    },
    {
      "type": "markdown",
      "content": "## Selecting a subset of pages\n\nWe only want the spreadsheet pages, which start on page 5."
    },
    {
      "type": "code",
      "content": "pages = pdf.pages[4:]\npages.show(cols=6)",
      "execution": {
        "status": "success",
        "output": "[DEBUG] Executing code: pages = pdf.pages[4:]...\n[DEBUG] Evaluating expression: pages.show(cols=6)...\n",
        "error": null,
        "figures": [],
        "result": {
          "type": "image/png",
          "path": "executions/pdfs/24480polcompleted/24480polcompleted/images/image_2.png"
        }
      }
    },
    {
      "type": "markdown",
      "content": "## Excluding extra text\n\nIf we look at the last page we see \"2770 Records Found\" at the bottom of the table, which we do *not* want in our dataset."
    },
    {
      "type": "code",
      "content": "pages[-1].show(crop=200)",
      "execution": {
        "status": "success",
        "output": "[DEBUG] Evaluating expression: pages[-1].show(crop=200)...\n",
        "error": null,
        "figures": [],
        "result": {
          "type": "image/png",
          "path": "executions/pdfs/24480polcompleted/24480polcompleted/images/image_3.png"
        }
      }
    },
    {
      "type": "markdown",
      "content": "We're going to **exclude it** so it doesn't show up in our table or confuse the table detector. But instead of matching it exactly, what if we end up doing this with different sets of documents? Maybe across years? It's easier to match with a **regex**, so instead of a specific number of records found we can look for `____ Records Found`."
    },
    {
      "type": "code",
      "content": "(\n  pages[-1]\n  .find_all('text:regex(\\\\d+ Records Found)')\n  .show(crop=100)\n)",
      "execution": {
        "status": "success",
        "output": "[DEBUG] Evaluating expression: pages[-1].find_all('text:regex(\\\\d+ Records Found)').show(crop=100)...\n",
        "error": null,
        "figures": [],
        "result": {
          "type": "image/png",
          "path": "executions/pdfs/24480polcompleted/24480polcompleted/images/image_4.png"
        }
      }
    },
    {
      "type": "markdown",
      "content": "**Anything we can find we can exclude.** Depending on what we expect our data to look like, we can exclude two different ways."
    },
    {
      "type": "tab",
      "title": "Exclude on the last page",
      "cells": [
        {
          "type": "markdown",
          "content": "We know the \"XXX results\" will always be on the last page, so we can add a simple text selector match."
        },
        {
          "type": "code",
          "content": "pages[-1].add_exclusion('text:regex(\\\\d+ Records Found)')",
          "execution": {
            "status": "success",
            "output": "[DEBUG] Evaluating expression: pages[-1].add_exclusion('text:regex(\\\\d+ Records Found)')...\n",
            "error": null,
            "figures": [],
            "result": {
              "type": "text/plain",
              "data": "<Page number=47 index=46>"
            }
          }
        }
      ]
    },
    {
      "type": "tab",
      "title": "Exclude on all possible pages",
      "cells": [
        {
          "type": "markdown",
          "content": "If we aren't sure whether the record counts will be on other pages besides the last page, we can add it to the PDF. This will apply it to every single page."
        },
        {
          "type": "code",
          "content": "pdf.add_exclusion(\n  lambda page: page.find_all('text:regex(\\\\d+ Records Found)')\n)",
          "execution": {
            "status": "success",
            "output": "[DEBUG] Evaluating expression: pdf.add_exclusion(lambda page: page.find_all('text:regex(\\\\d+ Records Found)'))...\n",
            "error": null,
            "figures": [],
            "result": {
              "type": "text/plain",
              "data": "<PDF source='24480polcompleted.pdf' pages=47>"
            }
          }
        }
      ]
    },
    {
      "type": "markdown",
      "content": "Record counts: excluded!"
    },
    {
      "type": "code",
      "content": "pages[-1].show(exclusions='red')",
      "execution": {
        "status": "success",
        "output": "[DEBUG] Evaluating expression: pages[-1].show(exclusions='red')...\n",
        "error": null,
        "figures": [],
        "result": {
          "type": "image/png",
          "path": "executions/pdfs/24480polcompleted/24480polcompleted/images/image_5.png"
        }
      }
    },
    {
      "type": "markdown",
      "content": "## Building our table\n\nNow we need to build our table. **Let's take a look at what the first page looks like again.**"
    },
    {
      "type": "code",
      "content": "pages[0].show()",
      "execution": {
        "status": "success",
        "output": "[DEBUG] Evaluating expression: pages[0].show()...\n",
        "error": null,
        "figures": [],
        "result": {
          "type": "image/png",
          "path": "executions/pdfs/24480polcompleted/24480polcompleted/images/image_6.png"
        }
      }
    },
    {
      "type": "markdown",
      "content": "## Extracting the tables with guides\n\nWe're going to use **guides** to outline the table with the following steps:\n\n- Drop vertical lines **between the column headers**, then re-use these boundaries on each page.\n- For horizontal rows, we'll say **find every place where text starts with NF-**, since each row starts with `NF-00051026-24`. That way even if there are multi-line rows we shouldn't have a problem.\n\nThere are two ways to do this: re-useable guides with lambdas or just manually updating your guide in a for loop.\n\n> You could *probably* do a raw `.extract_table()` on each page and combine them, but using grids makes things a bit more specific and controlled.\n>\n> For example, if an entire column is empty on one page the \"normal\" extraction method won't understand that it's missing data. If you base your guides off of a full/complete page, though, it knows the empty area represents a column with missing data."
    },
    {
      "type": "tab",
      "title": "Re-useable guides",
      "cells": [
        {
          "type": "markdown",
          "content": "We'll start by using **Guides** to draw our boundaries. While we might be able to separate rows based on whitespace, it's easier to base the borders on the content of the page:\n\n- Vertical boundaries go at the start of each of the column headers\n- Each row is located by text that starts with`NF-`\n\nBy default the last column (Main Officer) would be ignored since it doesn't have an \"ending\" vertical bar. To fix that I'll add `outer=\"last\"` so the outer area *after* the last boundary counts as a column."
        },
        {
          "type": "code",
          "content": "from natural_pdf.analyzers.guides import Guides\n\nguide = Guides(pages[0])\ncolumns = ['Number', 'Date Occurred', 'Time Occurred', 'Location', 'Call Type', 'Description', 'Disposition', 'Main Officer']\nguide.vertical.from_content(columns, outer=\"last\")\nguide.horizontal.from_content(\n  lambda p: p.find_all('text:starts-with(NF-)')\n)\nguide.show()",
          "execution": {
            "status": "success",
            "output": "[DEBUG] Executing code: from natural_pdf.analyzers.guides import Guides\nguide = Guides(pages[0])\ncolumns = ['Number', 'Date ...\n[DEBUG] Evaluating expression: guide.show()...\n",
            "error": null,
            "figures": [],
            "result": {
              "type": "image/png",
              "path": "executions/pdfs/24480polcompleted/24480polcompleted/images/image_7.png"
            }
          }
        },
        {
          "type": "markdown",
          "content": "Notice how we used a **lambda** in the approach above. This means we don't just want the `NF-` content on the first page, we want it for *any page the guide is applied to.*\n\nWe then say, apply this guide to every single page! Since the headers are only on the first page, we use `header=\"first\"`."
        },
        {
          "type": "code",
          "content": "table_result = guide.extract_table(pages, header=\"first\")\ndf = table_result.to_df()\ndf.head()",
          "execution": {
            "status": "success",
            "output": "[DEBUG] Executing code: table_result = guide.extract_table(pages, header='first')\ndf = table_result.to_df()...\n[DEBUG] Evaluating expression: df.head()...\n",
            "error": null,
            "figures": [],
            "result": {
              "type": "text/html",
              "data": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Number</th>\n      <th>Date Occurred</th>\n      <th>Time Occurred</th>\n      <th>Location</th>\n      <th>Call Type</th>\n      <th>Description</th>\n      <th>Disposition</th>\n      <th>Main Officer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>NF-00051317-24</td>\n      <td>11/17/2024</td>\n      <td>708</td>\n      <td>300 3RD ST, NIAGARA FALLS, NEW YORK</td>\n      <td>STOLEN VEHICLE</td>\n      <td>VEH WAS PARKED IN CITY LOT. NO LONGER THERE. &gt;</td>\n      <td>01 -CRIME REPORT</td>\n      <td>BAUMANN, JACK</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>NF-00051302-24</td>\n      <td>11/17/2024</td>\n      <td>208</td>\n      <td>300 3RD ST, NIAGARA FALLS, NEW YORK</td>\n      <td>PREMISE CHECK</td>\n      <td>None</td>\n      <td>37-CHECKED - ALL OK</td>\n      <td>ALCIME, ADONIS S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NF-00051298-24</td>\n      <td>11/17/2024</td>\n      <td>153</td>\n      <td>300 3RD ST, NIAGARA FALLS,</td>\n      <td>PREMISE CHECK</td>\n      <td>None</td>\n      <td>37-CHECKED - ALL OK</td>\n      <td>CLAPS, BRANDAN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NF-00051026-24</td>\n      <td>11/15/2024</td>\n      <td>141</td>\n      <td>300 3RD ST, NIAGARA FALLS,</td>\n      <td>PREMISE CHECK</td>\n      <td>None</td>\n      <td>37-CHECKED - ALL OK</td>\n      <td>GIZZARELLI, RYAN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NF-00051010-24</td>\n      <td>11/14/2024</td>\n      <td>2357</td>\n      <td>300 3RD ST, NIAGARA FALLS, NEW YORK</td>\n      <td>PREMISE CHECK</td>\n      <td>Sheraton Hotel</td>\n      <td>37-CHECKED - ALL OK</td>\n      <td>SHIHADAH, BAHA A</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
            }
          }
        }
      ]
    },
    {
      "type": "tab",
      "title": "Guides with loops",
      "cells": [
        {
          "type": "markdown",
          "content": "We'll start by drawing boundaries at the start of each of the column headers. Since there isn't a boundary to the right of the last column, we'll say `outer=\"last\"` to have the outer area after the last boundary count as a column."
        },
        {
          "type": "code",
          "content": "from natural_pdf.analyzers.guides import Guides\n\nbase = Guides(pages[0])\ncolumns = ['Number', 'Date Occurred', 'Time Occurred', 'Location', 'Call Type', 'Description', 'Disposition', 'Main Officer']\nbase.vertical.from_content(columns, outer=\"last\")\nbase.horizontal.from_content(pages[0].find_all('text:starts-with(NF-)'))\nbase.show()",
          "execution": {
            "status": "success",
            "output": "[DEBUG] Executing code: from natural_pdf.analyzers.guides import Guides\nbase = Guides(pages[0])\ncolumns = ['Number', 'Date O...\n[DEBUG] Evaluating expression: base.show()...\n",
            "error": null,
            "figures": [],
            "result": {
              "type": "image/png",
              "path": "executions/pdfs/24480polcompleted/24480polcompleted/images/image_8.png"
            }
          }
        },
        {
          "type": "markdown",
          "content": "We'll then pull out the first table from the first page."
        },
        {
          "type": "code",
          "content": "first_table = base.extract_table().to_df()\nfirst_table.head()",
          "execution": {
            "status": "success",
            "output": "[DEBUG] Executing code: first_table = base.extract_table().to_df()...\n[DEBUG] Evaluating expression: first_table.head()...\n",
            "error": null,
            "figures": [],
            "result": {
              "type": "text/html",
              "data": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Number</th>\n      <th>Date Occurred</th>\n      <th>Time Occurred</th>\n      <th>Location</th>\n      <th>Call Type</th>\n      <th>Description</th>\n      <th>Disposition</th>\n      <th>Main Officer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>NF-00051317-24</td>\n      <td>11/17/2024</td>\n      <td>708</td>\n      <td>300 3RD ST, NIAGARA FALLS, NEW YORK</td>\n      <td>STOLEN VEHICLE</td>\n      <td>VEH WAS PARKED IN CITY LOT. NO LONGER THERE. &gt;</td>\n      <td>01 -CRIME REPORT</td>\n      <td>BAUMANN, JACK</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>NF-00051302-24</td>\n      <td>11/17/2024</td>\n      <td>208</td>\n      <td>300 3RD ST, NIAGARA FALLS, NEW YORK</td>\n      <td>PREMISE CHECK</td>\n      <td>None</td>\n      <td>37-CHECKED - ALL OK</td>\n      <td>ALCIME, ADONIS S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NF-00051298-24</td>\n      <td>11/17/2024</td>\n      <td>153</td>\n      <td>300 3RD ST, NIAGARA FALLS,</td>\n      <td>PREMISE CHECK</td>\n      <td>None</td>\n      <td>37-CHECKED - ALL OK</td>\n      <td>CLAPS, BRANDAN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NF-00051026-24</td>\n      <td>11/15/2024</td>\n      <td>141</td>\n      <td>300 3RD ST, NIAGARA FALLS,</td>\n      <td>PREMISE CHECK</td>\n      <td>None</td>\n      <td>37-CHECKED - ALL OK</td>\n      <td>GIZZARELLI, RYAN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NF-00051010-24</td>\n      <td>11/14/2024</td>\n      <td>2357</td>\n      <td>300 3RD ST, NIAGARA FALLS, NEW YORK</td>\n      <td>PREMISE CHECK</td>\n      <td>Sheraton Hotel</td>\n      <td>37-CHECKED - ALL OK</td>\n      <td>SHIHADAH, BAHA A</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
            }
          }
        },
        {
          "type": "markdown",
          "content": "Now we're going to go through each additional page, extracting the table, adding it to a list of pandas dataframes. At the end we'll then combine them all into one big dataframe.\n\nNote that the first page is the **only one with column headers**. We used a simple `.to_df()` before, but now we need to say `headers=columns` to manually set the headers of each dataframe. If we didn't do this pandas wouldn't be able to stack them all together."
        },
        {
          "type": "code",
          "content": "dataframes = [first_table]\n\nfor page in pages:\n    guides = Guides(page)\n    guides.vertical = base.vertical\n    guides.horizontal.from_content(page.find_all('text:starts-with(NF-)'))\n    single_df = guides.extract_table().to_df(header=columns)\n    dataframes.append(single_df)\nprint(\"We made\", len(dataframes), \"dataframes\")",
          "execution": {
            "status": "success",
            "output": "[DEBUG] Executing code: dataframes = [first_table]\nfor page in pages:\n    guides = Guides(page)\n    guides.vertical = base.v...\n[DEBUG] Evaluating expression: print('We made', len(dataframes), 'dataframes')...\nWe made 44 dataframes\n",
            "error": null,
            "figures": [],
            "result": null
          }
        },
        {
          "type": "markdown",
          "content": "Now we can use `pd.concat` to combine them all."
        },
        {
          "type": "code",
          "content": "import pandas as pd\ndf = pd.concat(dataframes, ignore_index=True)\ndf.head()",
          "execution": {
            "status": "success",
            "output": "[DEBUG] Executing code: import pandas as pd\ndf = pd.concat(dataframes, ignore_index=True)...\n[DEBUG] Evaluating expression: df.head()...\n",
            "error": null,
            "figures": [],
            "result": {
              "type": "text/html",
              "data": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Number</th>\n      <th>Date Occurred</th>\n      <th>Time Occurred</th>\n      <th>Location</th>\n      <th>Call Type</th>\n      <th>Description</th>\n      <th>Disposition</th>\n      <th>Main Officer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>NF-00051317-24</td>\n      <td>11/17/2024</td>\n      <td>708</td>\n      <td>300 3RD ST, NIAGARA FALLS, NEW YORK</td>\n      <td>STOLEN VEHICLE</td>\n      <td>VEH WAS PARKED IN CITY LOT. NO LONGER THERE. &gt;</td>\n      <td>01 -CRIME REPORT</td>\n      <td>BAUMANN, JACK</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>NF-00051302-24</td>\n      <td>11/17/2024</td>\n      <td>208</td>\n      <td>300 3RD ST, NIAGARA FALLS, NEW YORK</td>\n      <td>PREMISE CHECK</td>\n      <td>None</td>\n      <td>37-CHECKED - ALL OK</td>\n      <td>ALCIME, ADONIS S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NF-00051298-24</td>\n      <td>11/17/2024</td>\n      <td>153</td>\n      <td>300 3RD ST, NIAGARA FALLS,</td>\n      <td>PREMISE CHECK</td>\n      <td>None</td>\n      <td>37-CHECKED - ALL OK</td>\n      <td>CLAPS, BRANDAN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NF-00051026-24</td>\n      <td>11/15/2024</td>\n      <td>141</td>\n      <td>300 3RD ST, NIAGARA FALLS,</td>\n      <td>PREMISE CHECK</td>\n      <td>None</td>\n      <td>37-CHECKED - ALL OK</td>\n      <td>GIZZARELLI, RYAN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NF-00051010-24</td>\n      <td>11/14/2024</td>\n      <td>2357</td>\n      <td>300 3RD ST, NIAGARA FALLS, NEW YORK</td>\n      <td>PREMISE CHECK</td>\n      <td>Sheraton Hotel</td>\n      <td>37-CHECKED - ALL OK</td>\n      <td>SHIHADAH, BAHA A</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
            }
          }
        }
      ]
    },
    {
      "type": "markdown",
      "content": "Done!"
    }
  ]
}