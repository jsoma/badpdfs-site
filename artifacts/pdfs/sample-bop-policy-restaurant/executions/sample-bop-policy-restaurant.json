{
  "file": "/home/runner/work/badpdfs-site/badpdfs-site/content/pdfs/sample-bop-policy-restaurant/sample-bop-policy-restaurant.md",
  "metadata": {
    "slug": "sample-bop-policy-restaurant",
    "title": "Extracting Business Insurance Details from BOP PDF",
    "description": "This PDF is a complex insurance policy document generated for small businesses requiring BOP coverage. It contains an overwhelming amount of information across 111 pages. Challenges include varied forms that may differ slightly between carriers, making extraction inconsistent. It has to deal with different templated layouts, meaning even standard parts can shift when generated by different software.",
    "pdf": "sample-bop-policy-restaurant.pdf",
    "tags": [
      "Insurance Policy",
      "Complex Layouts",
      "Templated Documents",
      "Watermark"
    ],
    "file_size_mb": 3.64,
    "page_count": 111,
    "submitted_by": "Olex Ponomarenko",
    "published": true,
    "file": "sample-bop-policy-restaurant.md"
  },
  "cells": [
    {
      "type": "markdown",
      "content": "# Extracting Business Insurance Details from BOP PDF\n\nThis PDF is a complex insurance policy document generated for small businesses requiring BOP coverage. It contains an overwhelming amount of information across 111 pages. Challenges include varied forms that may differ slightly between carriers, making extraction inconsistent. It has to deal with different templated layouts, meaning even standard parts can shift when generated by different software."
    },
    {
      "type": "code",
      "content": "from natural_pdf import PDF\nfrom natural_pdf.analyzers.guides import Guides\n\npdf = PDF(\"sample-bop-policy-restaurant.pdf\")\npage = pdf.pages[0]\npage.show()",
      "execution": {
        "status": "success",
        "output": "[DEBUG] Executing code: from natural_pdf import PDF\nfrom natural_pdf.analyzers.guides import Guides\npdf = PDF('sample-bop-po...\n[DEBUG] Evaluating expression: page.show()...\n",
        "error": null,
        "figures": [],
        "result": {
          "type": "image/png",
          "path": "executions/pdfs/sample-bop-policy-restaurant/sample-bop-policy-restaurant/images/image_1.png"
        }
      }
    },
    {
      "type": "markdown",
      "content": "Look at that watermark!"
    },
    {
      "type": "code",
      "content": "page.find_all('text[color~=red]').show()",
      "execution": {
        "status": "success",
        "output": "[DEBUG] Evaluating expression: page.find_all('text[color~=red]').show()...\n",
        "error": null,
        "figures": [],
        "result": {
          "type": "image/png",
          "path": "executions/pdfs/sample-bop-policy-restaurant/sample-bop-policy-restaurant/images/image_2.png"
        }
      }
    },
    {
      "type": "markdown",
      "content": "Let's exclude it by finding all reddish text and removing it on each page. We can do this pdf-wide."
    },
    {
      "type": "code",
      "content": "# pdf.add_exclusion('text[color~=red]')\npdf.find_all('text[color~=red]').exclude()",
      "execution": {
        "status": "success",
        "output": "[DEBUG] Evaluating expression: pdf.find_all('text[color~=red]').exclude()...\n",
        "error": null,
        "figures": [],
        "result": {
          "type": "text/plain",
          "data": "<ElementCollection[TextElement](count=1443)>"
        }
      }
    },
    {
      "type": "markdown",
      "content": "We can get the policy number by going to the right of the label."
    },
    {
      "type": "code",
      "content": "(\n    page\n    .find(text=\"POLICY NUMBER\")\n    .right(until='text')\n    .show()\n)",
      "execution": {
        "status": "success",
        "output": "[DEBUG] Evaluating expression: page.find(text='POLICY NUMBER').right(until='text').show()...\n",
        "error": null,
        "figures": [],
        "result": {
          "type": "image/png",
          "path": "executions/pdfs/sample-bop-policy-restaurant/sample-bop-policy-restaurant/images/image_3.png"
        }
      }
    },
    {
      "type": "code",
      "content": "(\n    page\n    .find(text=\"POLICY NUMBER\")\n    .right(until='text')\n    .extract_text()\n)",
      "execution": {
        "status": "success",
        "output": "[DEBUG] Evaluating expression: page.find(text='POLICY NUMBER').right(until='text').extract_text()...\n",
        "error": null,
        "figures": [],
        "result": {
          "type": "text/plain",
          "data": "'DEMO0001-00000-01'"
        }
      }
    },
    {
      "type": "markdown",
      "content": "The address is a little different since it spans two (or more? or fewer?) lines. We'll start by grabbing it, and expanding downwards until we hit the next text label."
    },
    {
      "type": "code",
      "content": "(\n    page\n    .find(text=\"Mailing Address\")\n    .expand(bottom='text')\n    .show()\n)",
      "execution": {
        "status": "success",
        "output": "[DEBUG] Evaluating expression: page.find(text='Mailing Address').expand(bottom='text').show()...\n",
        "error": null,
        "figures": [],
        "result": {
          "type": "image/png",
          "path": "executions/pdfs/sample-bop-policy-restaurant/sample-bop-policy-restaurant/images/image_4.png"
        }
      }
    },
    {
      "type": "markdown",
      "content": "Then we just swing to the right and grab the text across the rest of the page."
    },
    {
      "type": "code",
      "content": "(\n    page\n    .find(text=\"Mailing Address\")\n    .expand(bottom='text')\n    .right()\n    .extract_text()\n)",
      "execution": {
        "status": "success",
        "output": "[DEBUG] Evaluating expression: page.find(text='Mailing Address').expand(bottom='text').right().extract_text()...\n",
        "error": null,
        "figures": [],
        "result": {
          "type": "text/plain",
          "data": "'9 West Mechanic Street\\nNew Hope PA 18938'"
        }
      }
    },
    {
      "type": "markdown",
      "content": "Hmm what else do we have?"
    },
    {
      "type": "code",
      "content": "pdf.pages[:10].show(cols=2)",
      "execution": {
        "status": "success",
        "output": "[DEBUG] Evaluating expression: pdf.pages[:10].show(cols=2)...\n",
        "error": null,
        "figures": [],
        "result": {
          "type": "image/png",
          "path": "executions/pdfs/sample-bop-policy-restaurant/sample-bop-policy-restaurant/images/image_5.png"
        }
      }
    },
    {
      "type": "markdown",
      "content": "Hmmm let's go to the **Service of Suit** page. I don't want to think abotu guessing what page it is, so I'll just find the text on it."
    },
    {
      "type": "code",
      "content": "page = pdf.find(text=\"SERVICE OF SUIT\").page\npage.show()",
      "execution": {
        "status": "success",
        "output": "[DEBUG] Executing code: page = pdf.find(text='SERVICE OF SUIT').page...\n[DEBUG] Evaluating expression: page.show()...\n",
        "error": null,
        "figures": [],
        "result": {
          "type": "image/png",
          "path": "executions/pdfs/sample-bop-policy-restaurant/sample-bop-policy-restaurant/images/image_6.png"
        }
      }
    },
    {
      "type": "markdown",
      "content": "We probably want to get rid of those headers and footers."
    },
    {
      "type": "code",
      "content": "header = page.region(bottom=100)\nfooter = page.region(bottom=page.height-70)\n(header + footer).show()",
      "execution": {
        "status": "success",
        "output": "[DEBUG] Executing code: header = page.region(bottom=100)\nfooter = page.region(bottom=page.height - 70)...\n[DEBUG] Evaluating expression: (header + footer).show()...\n",
        "error": null,
        "figures": [],
        "result": {
          "type": "image/png",
          "path": "executions/pdfs/sample-bop-policy-restaurant/sample-bop-policy-restaurant/images/image_7.png"
        }
      }
    },
    {
      "type": "markdown",
      "content": "Might as well get rid of them on every single page while we're at it."
    },
    {
      "type": "code",
      "content": "pdf.add_exclusion(lambda page: page.region(bottom=100))\npdf.add_exclusion(lambda page: page.region(top=page.height-70))",
      "execution": {
        "status": "success",
        "output": "[DEBUG] Executing code: pdf.add_exclusion(lambda page: page.region(bottom=100))...\n[DEBUG] Evaluating expression: pdf.add_exclusion(lambda page: page.region(top=page.height - 70))...\n",
        "error": null,
        "figures": [],
        "result": {
          "type": "text/plain",
          "data": "<PDF source='sample-bop-policy-restaurant.pdf' pages=111>"
        }
      }
    },
    {
      "type": "markdown",
      "content": "And now we can grab the text!"
    },
    {
      "type": "code",
      "content": "text = page.extract_text()\nprint(text)",
      "execution": {
        "status": "success",
        "output": "[DEBUG] Executing code: text = page.extract_text()...\n[DEBUG] Evaluating expression: print(text)...\nHU 01 05 01 18\nSERVICE OF SUIT\nThis endorsement modifies insurance provided under the following:\nCOMMERCIAL PROPERTY COVERAGE PART\nCOMMERCIAL GENERAL LIABILITY COVERAGE PART\nCOMMERCIAL INLAND COVERAGE PART\nBUSINESSOWNERS COVERAGE FORM\nPursuant to any statute of any state, territory or district of the United States which makes provision therefore we\nhereby designate the Commissioner, Superintendent or Director of Insurance or other officer specified for that\npurpose in the statute, and his successor or successors in office, as our true and lawful attorney upon whom may\nbe served any lawful process in any action, suit, contract of insurance and hereby designate the Corporate\nSecretary of Blackboard Insurance Company, 1209 Orange Street, Wilmington, DE 19801, as the entity to whom\nsaid officer is authorized to mail such process or a true copy thereof.\n",
        "error": null,
        "figures": [],
        "result": null
      }
    },
    {
      "type": "markdown",
      "content": "The rest of the PDF is a low of finding and `.below()` and `.right()` and all of that."
    }
  ]
}