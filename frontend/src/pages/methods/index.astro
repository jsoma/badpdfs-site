---
import '../../styles/global.css';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import DarkModeToggle from '../../components/DarkModeToggle.astro';

const BASE_URL = import.meta.env.BASE_URL;

// Load all metadata to get method information
const allMetadata = (await import('../../../public/artifacts/all_metadata.json', { with: { type: 'json' } })).default;

// Collect all unique methods with their usage counts
const methodCounts = {};
const methodExamples = {};

for (const item of allMetadata) {
  // First collect from method_usage (detailed usage)
  if (item.method_usage) {
    item.method_usage.forEach(usage => {
      const method = usage.method;
      
      // Count total usages
      if (!methodCounts[method]) {
        methodCounts[method] = 0;
        methodExamples[method] = [];
      }
      methodCounts[method]++;
      
      // Store example PDFs (limit to 3)
      if (methodExamples[method].length < 3 && !methodExamples[method].find(ex => ex.id === item.id)) {
        methodExamples[method].push({
          id: item.id,
          title: item.title,
          slug: item.slug
        });
      }
    });
  }
  
  // Also collect from methods array (includes chained methods like dissolve)
  if (item.methods) {
    item.methods.forEach(method => {
      // Skip if already counted
      if (!methodCounts[method]) {
        methodCounts[method] = 0;
        methodExamples[method] = [];
      }
      // Always increment count
      methodCounts[method]++;
      
      // Store example PDFs (limit to 3)
      if (methodExamples[method].length < 3 && !methodExamples[method].find(ex => ex.id === item.id)) {
        methodExamples[method].push({
          id: item.id,
          title: item.title,
          slug: item.slug
        });
      }
    });
  }
}

// Sort methods alphabetically (case-insensitive)
const sortedMethods = Object.keys(methodCounts).sort((a, b) => 
  a.toLowerCase().localeCompare(b.toLowerCase())
);

// Group methods by first letter
const groupedMethods = sortedMethods.reduce((groups, method) => {
  const firstLetter = method[0].toUpperCase();
  if (!groups[firstLetter]) {
    groups[firstLetter] = [];
  }
  groups[firstLetter].push(method);
  return groups;
}, {});
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>All Methods | bad pdfs</title>
    <meta name="description" content="Complete reference of all natural-pdf methods used in the gallery examples" />
  </head>
  <body>
    <Header currentPage="methods" />
    
    <main class="methods-index">
      <div class="container">
        <div class="page-header">
          <h1>All Methods</h1>
          <p>Complete reference of natural-pdf methods demonstrated in the gallery</p>
        </div>
        
        <div class="methods-summary">
          <div class="stat">
            <span class="stat-number">{sortedMethods.length}</span>
            <span class="stat-label">Total Methods</span>
          </div>
          <div class="stat">
            <span class="stat-number">{Object.values(methodCounts).reduce((sum, count) => sum + count, 0)}</span>
            <span class="stat-label">Total Examples</span>
          </div>
        </div>
        
        <div class="methods-grid">
          {Object.entries(groupedMethods).map(([letter, methods]) => (
            <section class="letter-group">
              <h2 class="letter-header">{letter}</h2>
              <div class="methods-list">
                {methods.map(method => (
                  <a href={`${BASE_URL}methods/${encodeURIComponent(method.toLowerCase())}`} class="method-card">
                    <div class="method-header">
                      <h3 class="method-name">{method}</h3>
                      <span class="usage-count">{methodCounts[method]} usage{methodCounts[method] !== 1 ? 's' : ''}</span>
                    </div>
                    <div class="method-examples">
                      <span class="examples-label">Used in:</span>
                      {methodExamples[method].map((example, index) => (
                        <>
                          <span class="example-name">{example.title}</span>
                          {index < methodExamples[method].length - 1 && <span class="separator">, </span>}
                        </>
                      ))}
                      {methodExamples[method].length < Object.values(methodExamples[method]).length && 
                        <span class="more">...</span>
                      }
                    </div>
                  </a>
                ))}
              </div>
            </section>
          ))}
        </div>
      </div>
    </main>
    
    <Footer />
    <DarkModeToggle />
  </body>
</html>

<style>
  .methods-index {
    min-height: calc(100vh - 80px);
  }

  .container {
    max-width: 1280px;
    margin: 0 auto;
    padding: 2rem;
  }

  .page-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .page-header h1 {
    font-size: 2.5rem;
    font-weight: 700;
    margin: 0 0 0.5rem 0;
    background: linear-gradient(135deg, var(--color-gradient-start) 0%, var(--color-gradient-end) 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .page-header p {
    font-size: 1.125rem;
    color: var(--color-text-muted);
    margin: 0;
  }

  .methods-summary {
    display: flex;
    justify-content: center;
    gap: 3rem;
    margin-bottom: 3rem;
  }

  .stat {
    text-align: center;
  }

  .stat-number {
    display: block;
    font-size: 3rem;
    font-weight: 700;
    color: var(--color-primary);
    line-height: 1;
  }

  .stat-label {
    display: block;
    font-size: 0.875rem;
    color: var(--color-text-muted);
    margin-top: 0.5rem;
  }

  .methods-grid {
    display: grid;
    gap: 2rem;
  }

  .letter-group {
    border-top: 1px solid var(--color-border);
    padding-top: 2rem;
  }

  .letter-header {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--color-primary);
    margin: 0 0 1rem 0;
  }

  .methods-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
  }

  .method-card {
    display: block;
    padding: 1.25rem;
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    text-decoration: none;
    transition: all 0.2s ease;
  }

  .method-card:hover {
    border-color: var(--color-primary);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    transform: translateY(-2px);
  }

  .method-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.75rem;
  }

  .method-name {
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, monospace;
    font-size: 1rem;
    font-weight: 600;
    color: var(--color-text);
    margin: 0;
  }

  .usage-count {
    font-size: 0.75rem;
    color: var(--color-text-muted);
    background: var(--color-background);
    padding: 0.25rem 0.5rem;
    border-radius: 9999px;
  }

  .method-examples {
    font-size: 0.75rem;
    color: var(--color-text-muted);
    display: flex;
    align-items: center;
    gap: 0.375rem;
    flex-wrap: wrap;
  }

  .examples-label {
    font-weight: 500;
  }

  .example-name {
    color: var(--color-primary);
  }

  .separator {
    color: var(--color-border);
  }

  .more {
    color: var(--color-text-muted);
  }

  @media (max-width: 768px) {
    .container {
      padding: 1rem;
    }

    .methods-list {
      grid-template-columns: 1fr;
    }
  }

</style>